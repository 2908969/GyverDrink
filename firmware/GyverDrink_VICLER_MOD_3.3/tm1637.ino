
uint8_t AnimationData_0[20][4] {
  {0x63, 0x00, 0x00, 0x00},       //-
  {0x00, 0x63, 0x00, 0x00},       // -
  {0x00, 0x00, 0x63, 0x00},       //  -
  {0x00, 0x00, 0x00, 0x63},       //   -
  {0x63, 0x00, 0x00, 0x63},       //-  -
  {0x00, 0x63, 0x00, 0x63},       // - -
  {0x00, 0x00, 0x63, 0x63},       //  --
  {0x63, 0x00, 0x63, 0x63},       //- --
  {0x00, 0x63, 0x63, 0x63},       // ---
  {0x63, 0x63, 0x63, 0x63},       //----
  {0x63, 0x63, 0x63, 0x00},       //---
  {0x63, 0x63, 0x00, 0x63},       //-- -
  {0x63, 0x63, 0x00, 0x00},       //--
  {0x63, 0x00, 0x63, 0x00},       //- -
  {0x63, 0x00, 0x00, 0x63},       //-  -
  {0x63, 0x00, 0x00, 0x00},       //-
  {0x00, 0x63, 0x00, 0x00},       // -
  {0x00, 0x00, 0x63, 0x00},       //  -
  {0x00, 0x00, 0x00, 0x63},       //   -
  {0x00, 0x00, 0x00, 0x00}        //
};
uint8_t AnimationData_1[12][4] {
  {0x40, 0x42, 0x50, 0x40},        //
  {0x50, 0x40, 0x40, 0x42},        //
  {0x58, 0x00, 0x00, 0x43},        //
  {0x18, 0x08, 0x01, 0x03},        //
  {0x08, 0x0c, 0x21, 0x01},        //
  {0x00, 0x4c, 0x61, 0x00},        //
  {0x40, 0x44, 0x60, 0x40},        //
  {0x60, 0x40, 0x40, 0x44},        //
  {0x61, 0x00, 0x00, 0x4c},        //
  {0x21, 0x01, 0x08, 0x0c},        //
  {0x01, 0x03, 0x18, 0x08},        //
  {0x00, 0x43, 0x58, 0x00},        //
};
uint8_t AnimationData_2[12][4] {
  {0x01, 0x01, 0x01, 0x00},        //
  {0x00, 0x01, 0x01, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //
  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x08, 0x08, 0x08},        //
  {0x08, 0x08, 0x08, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //
  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
};
uint8_t AnimationData_3[60][4] {
  {0x31, 0x00, 0x00, 0x00},        //
  {0x23, 0x00, 0x00, 0x00},        //
  {0x07, 0x00, 0x00, 0x00},        //
  {0x0e, 0x00, 0x00, 0x00},        //
  {0x1c, 0x00, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //

  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
  {0x01, 0x03, 0x00, 0x00},        //
  {0x00, 0x07, 0x00, 0x00},        //
  {0x00, 0x0e, 0x00, 0x00},        //
  {0x08, 0x0c, 0x00, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //

  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
  {0x01, 0x01, 0x01, 0x00},        //
  {0x00, 0x01, 0x03, 0x00},        //
  {0x00, 0x00, 0x07, 0x00},        //
  {0x00, 0x00, 0x0e, 0x00},        //
  {0x00, 0x08, 0x0c, 0x00},        //
  {0x08, 0x08, 0x08, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00},        //

  {0x31, 0x00, 0x00, 0x00},        //
  {0x21, 0x01, 0x00, 0x00},        //
  {0x01, 0x01, 0x01, 0x00},        //
  {0x00, 0x01, 0x01, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //

  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x08, 0x08, 0x08},        //
  {0x00, 0x18, 0x08, 0x00},        //
  {0x00, 0x38, 0x00, 0x00},        //
  {0x00, 0x31, 0x00, 0x00},        //
  {0x00, 0x21, 0x01, 0x00},        //
  {0x00, 0x01, 0x01, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //

  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x00, 0x18, 0x08},        //
  {0x00, 0x00, 0x38, 0x00},        //
  {0x00, 0x00, 0x31, 0x00},        //
  {0x00, 0x00, 0x21, 0x01},        //
  {0x00, 0x00, 0x01, 0x03},        //
  {0x00, 0x00, 0x00, 0x07},        //

  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x00, 0x1c},        //
  {0x00, 0x00, 0x00, 0x38},        //
  {0x00, 0x00, 0x00, 0x31},        //
  {0x00, 0x00, 0x00, 0x23},        //
  {0x00, 0x00, 0x00, 0x07},        //
  {0x00, 0x00, 0x00, 0x0e},        //
  {0x00, 0x00, 0x08, 0x0c},        //
  {0x00, 0x08, 0x08, 0x08},        //
  {0x08, 0x08, 0x08, 0x00},        //
  {0x18, 0x08, 0x00, 0x00},        //
  {0x38, 0x00, 0x00, 0x00}         //
};
uint8_t AnimationData_4[6][4] {
  {0x63, 0x00, 0x00, 0x5c},        //
  {0x00, 0x63, 0x5c, 0x00},        //
  {0x00, 0x5c, 0x63, 0x00},        //
  {0x5c, 0x00, 0x00, 0x63},        //
  {0x00, 0x5c, 0x63, 0x00},        //
  {0x00, 0x63, 0x5c, 0x00}         //
};
uint8_t AnimationData_5[8][4] {
  {0x63, 0x00, 0x00, 0x00},        //
  {0x00, 0x63, 0x00, 0x00},        //
  {0x00, 0x00, 0x63, 0x00},        //
  {0x00, 0x00, 0x00, 0x63},        //
  {0x00, 0x00, 0x00, 0x5c},        //
  {0x00, 0x00, 0x5c, 0x00},        //
  {0x00, 0x5c, 0x00, 0x00},        //
  {0x5c, 0x00, 0x00, 0x00}         //
};
uint8_t AnimationData_6[12][4] {
  {0x30, 0x00, 0x00, 0x00},       //|
  {0x00, 0x00, 0x00, 0x00},       //
  {0x40, 0x00, 0x00, 0x00},       //-
  {0x00, 0x40, 0x00, 0x00},       // -
  {0x00, 0x00, 0x40, 0x00},       //  -
  {0x00, 0x00, 0x00, 0x40},       //   -
  {0x00, 0x00, 0x00, 0x06},       //    |
  {0x00, 0x00, 0x00, 0x00},       //
  {0x00, 0x00, 0x00, 0x40},       //   -
  {0x00, 0x00, 0x40, 0x00},       //  -
  {0x00, 0x40, 0x00, 0x00},       // -
  {0x40, 0x00, 0x00, 0x00}        //-
};
uint8_t AnimationData_7[23][4] {
  { 48,   0,   0,   0},
  {121,   0,   0,   0},
  {127,   0,   0,   0},
  
  {127,  48,   0,   0},
  {127, 121,   0,   0},
  {127, 127,   0,   0},
  
  {127, 127,  48,   0},
  {127, 127, 121,   0},
  {127, 127, 127,   0},
  
  {127, 127, 127,  48},
  {127, 127, 127, 121},
  {127, 127, 127, 127},

  { 79, 127, 127, 127},
  {  6, 127, 127, 127},
  {  0, 127, 127, 127},

  {  0,  79, 127, 127},
  {  0,   6, 127, 127},
  {  0,   0, 127, 127},

  {  0,   0,  79, 127},
  {  0,   0,   6, 127},
  {  0,   0,   0, 127},

  {  0,   0,   0,  79},
  {  0,   0,   0,   6},
};

// анимация TM1637
void showAnimation(byte mode) {
  static byte i = 0;
  static int8_t dir = 1;
  if (mode == 0) {
    if (i >= 20) i = 0;
    disp.displayByte(AnimationData_0[i++]);
  }
  else if (mode == 1) {
    if (i >= 12) i = 0;
    disp.displayByte(AnimationData_1[i++]);
  }
  else if (mode == 2) {
    if (i >= 12) i = 0;
    disp.displayByte(AnimationData_2[i++]);
  }
  else if (mode == 3) {
    if (i >= 60) i = 0;
    disp.displayByte(AnimationData_3[i++]);
  }
  else if (mode == 4) {
    if (i >= 6) i = 0;
    disp.displayByte(AnimationData_4[i++]);
  }
  else if (mode == 5) {
    if (i >= 8) i = 0;
    disp.displayByte(AnimationData_5[i++]);
  }
  else if (mode == 6) {
    if (i >= 12) i = 0;
    disp.displayByte(AnimationData_6[i++]);
  }
  else if (mode == 7) {
    if (i == 22) dir = -1;
    else if(i == 0) dir = 1;
    disp.displayByte(AnimationData_7[i += dir]);
  }
}

// выводим режим
void dispMode() {
  if (workMode) {
    if (thisVolume < 100) disp.displayByte(0, 64);
    disp.displayByte(3, 64);
  }
  else {
    if (thisVolume < 100) disp.displayByte(0, 0x00);
    disp.displayByte(3, 0x00);
  }
}

void dispNum(uint16_t num, bool mode) {
  static uint16_t lastNum = num;
  if (num < 100) {                                // число меньше 100
    if(num < 10)                                  
      disp.displayByte(workMode * 0x40, 0, digToHEX(num % 10), workMode * 0x40);  // число меньше 10 - второйиндикатор пуст
    else if((num / 10) != (lastNum / 10))             
      disp.scrollByte(workMode * 0x40, digToHEX(num / 10), digToHEX(num % 10), workMode * 0x40, 40);  // десятки изменились - прокрутка
    else 
      disp.displayByte(workMode * 0x40, digToHEX(num / 10), digToHEX(num % 10), workMode * 0x40);     // иначе статичное изменение
  }
  else if (num < 1000) {
    disp.display(0, num / 100);
    disp.display(1, (num % 100) / 10);
    disp.display(2, num % 10);
    if (!workMode) disp.displayByte(3, 0x00);
    else disp.displayByte(3, 0x40);
  }
  else if (mode == 1) {
    disp.display(0, num / 1000);              // тысячные
    disp.display(1, (num % 1000) / 100);     // сотые
    disp.display(2, (num % 100) / 10);      // десятые
    disp.display(3, num % 10);
  }
  else {
    disp.display(0, num / 1000);                                            // тысячные
    if ( (num % 1000) / 100 > 0 )  disp.display(1, (num % 1000) / 100);     // сотые
    else disp.displayByte(1, 0x00);
    if ( ((num % 100) / 10 > 0) || ((num % 1000) / 100 > 0) )  disp.display(2, (num % 100) / 10);         // десятые
    else disp.displayByte(2, 0x00);
    disp.display(3, num % 10);
  }

  lastNum = num;
}
